import React, { useEffect, useState } from 'react';
import s from './CreateOrEditAlbum.module.scss';
import {
	useCreateFolderMutation,
	useGetFolderByIdQuery,
	useUpdateFolderMutation,
} from '../../redux/foldersApi';
import {
	useDeleteImageMutation,
	useGetImagesQuery,
	useUploadImagesMutation,
} from '../../redux/imagesApi';
import { ErrorMessage, Form, Formik, FormikHelpers } from 'formik';
import { useNavigate, useSearchParams } from 'react-router';
import Gallery from '../../components/Gallery/Gallery';
import { IImage } from '../../types/IImage';

const CreateOrEditAlbum: React.FC = () => {
	const navigate = useNavigate();
	const [searchParams] = useSearchParams();
	const albumId = searchParams.get('albumId') as string;
	const [addAlbum, { isLoading: isCreatingAlbum, isSuccess: isAlbumCreated }] =
		useCreateFolderMutation();
	const [uploadImages, { isLoading: isUploadingImages }] = useUploadImagesMutation();
	const { data: images = [] } = useGetImagesQuery(albumId, { skip: !albumId });
	const { data: albumData } = useGetFolderByIdQuery(albumId, { skip: !albumId });
	const [updateAlbum, { isLoading: isUpdatingAlbum }] = useUpdateFolderMutation();

	const [deleteImageById] = useDeleteImageMutation();

	const [coverPreview, setCoverPreview] = useState<string | null>(null);
	const [imagePreviews, setImagePreviews] = useState<IImage[]>([]);
	const [albumName, setAlbumName] = useState('');
	const [albumFiles, setAlbumFiles] = useState<File[]>([]);

	const initialValues = {
		name: albumData ? albumData.name : '',
		cover_img: null as File | null,
		link: 'album',
		album_images: [] as File[],
	};

	useEffect(() => {
		if (albumData) {
			setAlbumName(albumData.name);
			setCoverPreview(albumData.cover_img);
		}
	}, [albumData]);

	const onSubmit = async (
		values: typeof initialValues,
		{ resetForm }: { resetForm: () => void }
	) => {
		if (!values.cover_img && !albumData?.cover_img) {
			alert('–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –æ–±–∫–ª–∞–¥–∏–Ω–∫—É –∞–ª—å–±–æ–º—É');
			return;
		}

		const convertToBase64 = (file: File): Promise<string> => {
			return new Promise((resolve, reject) => {
				const reader = new FileReader();
				reader.readAsDataURL(file);
				reader.onload = () => resolve(reader.result as string);
				reader.onerror = reject;
			});
		};

		try {
			const coverBase64 = values.cover_img
				? await convertToBase64(values.cover_img)
				: albumData?.cover_img;

			let finalAlbumId = albumId; // ID –∞–ª—å–±–æ–º—É –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ñ–æ—Ç–æ

			if (albumData) {
				// üîπ –û–Ω–æ–≤–ª—é—î–º–æ —ñ—Å–Ω—É—é—á–∏–π –∞–ª—å–±–æ–º
				await updateAlbum({
					folderId: albumId,
					name: values.name,
					link: values.link,
					cover_img: coverBase64 || albumData.cover_img,
				}).unwrap();
				console.log('‚úÖ –ê–ª—å–±–æ–º –æ–Ω–æ–≤–ª–µ–Ω–æ');
			} else {
				// üÜï –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –∞–ª—å–±–æ–º
				const album = await addAlbum({
					name: values.name ?? '',
					link: values.link ?? '',
					cover_img: coverBase64 ?? '',
				}).unwrap();

				if (!album || !album._id) {
					throw new Error('–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ ID –∞–ª—å–±–æ–º—É');
				}

				console.log('‚úÖ –ê–ª—å–±–æ–º —Å—Ç–≤–æ—Ä–µ–Ω–æ');
				finalAlbumId = String(album._id); // –û—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–≤–∏–π ID –∞–ª—å–±–æ–º—É
			}

			// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å –ª–∏—à–µ —è–∫—â–æ —î albumFiles
			if (albumFiles.length > 0 && finalAlbumId) {
				const albumImages = await Promise.all(
					albumFiles.map(async (file) => ({
						img: await convertToBase64(file),
						name: file.name,
						folder_id: finalAlbumId, // üîπ –ü–µ—Ä–µ–¥–∞—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π ID –∞–ª—å–±–æ–º—É
					}))
				);

				if (albumImages.length > 0) {
					await uploadImages(albumImages).unwrap();
					console.log('‚úÖ –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ');
				}
			}

			resetForm();
			setCoverPreview(null);
			setImagePreviews([]);
			setAlbumFiles([]);
			navigate(`/album?albumId=${finalAlbumId}`);
		} catch (err) {
			console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ/–æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∞–ª—å–±–æ–º—É:', err);
			alert('–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∞–±–æ –æ–Ω–æ–≤–∏—Ç–∏ –∞–ª—å–±–æ–º. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
		}
	};

	const handleNameChange = (
		event: React.ChangeEvent<HTMLInputElement>,
		setFieldValue: FormikHelpers<typeof initialValues>['setFieldValue']
	) => {
		setFieldValue('name', event.target.value);
		setAlbumName(event.target.value);
	};

	const handleCoverChange = (
		event: React.ChangeEvent<HTMLInputElement>,
		setFieldValue: FormikHelpers<typeof initialValues>['setFieldValue']
	) => {
		const file = event.target.files?.[0] || null;
		setFieldValue('cover_img', file);

		if (file) {
			const reader = new FileReader();
			reader.readAsDataURL(file);
			reader.onload = () => setCoverPreview(reader.result as string);
		}
	};

	const handleImagesChange = (
		event: React.ChangeEvent<HTMLInputElement>,
		setFieldValue: FormikHelpers<typeof initialValues>['setFieldValue']
	) => {
		const files = event.target.files ? Array.from(event.target.files) : [];
		setFieldValue('album_images', files);
		setAlbumFiles(files);

		const previews = files.map((file) => {
			const reader = new FileReader();
			reader.readAsDataURL(file);
			return new Promise<{ img: string; name: string }>((resolve) => {
				reader.onload = () => resolve({ img: reader.result as string, name: file.name });
			});
		});

		Promise.all(previews).then(setImagePreviews);
	};

	const deleteImage = (index: number, _id?: string) => {
		if (_id) {
			deleteImageById(_id);
		} else {
			const newFiles = [...albumFiles];
			const newPreviews = [...imagePreviews];

			newFiles.splice(index, 1);
			newPreviews.splice(index, 1);
			setAlbumFiles(newFiles);
			setImagePreviews(newPreviews);
		}
	};

	return (
		<div className={s.container}>
			<h1 className={s.title}>–°—Ç–≤–æ—Ä—ñ—Ç—å –∞–ª—å–±–æ–º</h1>
			<Formik initialValues={initialValues} onSubmit={onSubmit} enableReinitialize={true}>
				{(formik) => (
					<Form className={s.form}>
						<div className={s.nameAndCoverAndCoverImg}>
							<div className={s.nameAndCover}>
								<div className={s.inputContainer}>
									<input
										className={s.input}
										type="text"
										placeholder="–ù–∞–∑–≤–∞ –∞–ª—å–±–æ–º—É"
										{...formik.getFieldProps('name')}
										onChange={(event) => handleNameChange(event, formik.setFieldValue)}
									/>
									<ErrorMessage name="name" component="span" className={s.error} />
								</div>

								<div className={s.inputContainer}>
									<label className={s.label}>–û–±–∫–ª–∞–¥–∏–Ω–∫–∞ –∞–ª—å–±–æ–º—É:</label>
									<input
										className={s.input}
										type="file"
										accept="image/*"
										onChange={(event) => handleCoverChange(event, formik.setFieldValue)}
									/>

									<ErrorMessage name="cover_img" component="span" className={s.error} />
								</div>
								<div className={s.inputContainer}>
									<label className={s.label}>–î–æ–¥–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ –∞–ª—å–±–æ–º:</label>
									<input
										className={s.input}
										type="file"
										accept="image/*"
										multiple
										onChange={(event) => handleImagesChange(event, formik.setFieldValue)}
									/>
									<ErrorMessage name="album_images" component="span" className={s.error} />
								</div>
							</div>
							<div className={s.coverPreviewContainer}>
								<div className={s.coverPreview}>
									{coverPreview || albumData?.cover_img ? (
										<img
											src={coverPreview === null ? albumData?.cover_img : coverPreview}
											alt="–û–±–∫–ª–∞–¥–∏–Ω–∫–∞"
											className={s.previewImage}
										/>
									) : null}
								</div>
								<span className={s.albumName}>{albumName}</span>
							</div>
						</div>

						<button
							disabled={isUploadingImages || isCreatingAlbum || isAlbumCreated || isUpdatingAlbum}
							className={s.submitBtn}
							type="submit"
						>
							{isCreatingAlbum
								? '–°—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –∞–ª—å–±–æ–º...'
								: isUploadingImages
									? '–ó–∞–≤–∞–Ω—Ç–∞–∂—É—é—Ç—å—Å—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è...'
									: isUpdatingAlbum
										? '–û–Ω–æ–≤–ª—é—î—Ç—å—Å—è –∞–ª—å–±–æ–º...'
										: albumId
											? '–û–Ω–æ–≤–∏—Ç–∏ –∞–ª—å–±–æ–º'
											: '–°—Ç–≤–æ—Ä–∏—Ç–∏ –∞–ª—å–±–æ–º'}
						</button>
					</Form>
				)}
			</Formik>
			<Gallery
				images={[...imagePreviews, ...images]}
				onClickDeleteImage={deleteImage}
				variant="createEditAlbum"
			/>
		</div>
	);
};

export default CreateOrEditAlbum;
